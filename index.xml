<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Vozhuo&#39;s Blog</title>
    <link>https://vozhuo.github.io/</link>
    <description>Recent content on Vozhuo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 05 Feb 2024 15:42:59 +0800</lastBuildDate>
    <atom:link href="https://vozhuo.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://vozhuo.github.io/about/</link>
      <pubDate>Thu, 17 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/about/</guid>
      <description> SDUST/GXU Disqus Chinese localization team reviewer Chinese Wikipedia editor </description>
    </item>
    <item>
      <title>常用软件下载地址</title>
      <link>https://vozhuo.github.io/posts/common-software/</link>
      <pubDate>Mon, 05 Feb 2024 15:42:59 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/common-software/</guid>
      <description>实用工具 Bandizip RevoUninstaller Clash.Nyanpasu 小鹤双拼 Office Office Tool Plus Office Tab MathType 社交软件 QQ 微信 安全软件 Kaspersky 编程工具 miniconda Microsoft VS Code NodeJs Git 使用 HTTP 代理： git config --global http.proxy http://127.0.0.1:7890 git config --global https.proxy https://127.0.0.1:7890 工程软件 Abaqus </description>
    </item>
    <item>
      <title>使用Pyinstaller打包Django项目</title>
      <link>https://vozhuo.github.io/posts/pyinstaller-convert-django/</link>
      <pubDate>Thu, 24 Sep 2020 20:51:20 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/pyinstaller-convert-django/</guid>
      <description>&lt;p&gt;首先，需要确定打包后的应用程序是否需要支持32位的Windows操作系统，如果需要32位系统的支持，那么需要在32位的Python环境下打包。Anaconda为例，在Anaconda Prompt中输入set CONDA_FORCE_32BIT=1，再创建新的Python环境，在这个环境下下载的Python包均为32位。用32位的Python环境打包的应用程序同样也可在64位操作系统下运行，但用64位的Python环境打包的应用程序则不能在32位操作系统下运行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[论文]Semi-supervised Audio Classification with Consistency-Based Regularization</title>
      <link>https://vozhuo.github.io/posts/ssl-audio/</link>
      <pubDate>Thu, 27 Feb 2020 11:43:56 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/ssl-audio/</guid>
      <description>&lt;p&gt;发表于2019 Interspeech。&lt;/p&gt;
&lt;p&gt;将半监督方法Mean Teacher用于Google Speech Commands和UrbanSound8Ku数据集，其关键在于对音频数据的扰动，包括时间和频率转换、高斯噪声、环境噪声和Mixup，所用的音频数据均被转换为频谱图图像。环境噪声和Mixup两种方法是独立添加的，为防止互相影响。实验结果显示Mixup的效果要好于添加环境噪声。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[论文]FixMatch: Simplifying Semi-Supervised Learning with Consistency and Confidence</title>
      <link>https://vozhuo.github.io/posts/fixmatch/</link>
      <pubDate>Sun, 23 Feb 2020 21:46:18 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/fixmatch/</guid>
      <description>&lt;p&gt;2020年1月21日于Arxiv公开，https://arxiv.org/abs/2001.07685&lt;/p&gt;
&lt;p&gt;FixMatch整合了一致性正则化与伪标签两种方法。文中将数据增强分为弱增强和强增强，弱增强为标准的平移与翻转，强增强为RandAugment或CTAugment，之后接Cutout。FixMatch的流程如下：首先，将未标记图像的弱增强版本输入模型中以获得预测值。预测值高于某个阈值时，预测值将会转换为one-hot伪标记。然后，将对同一张图片的强增强版本计算输入模型获得预测。通过标准的交叉熵损失，使其在强增强版本上的预测与伪标记匹配。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[论文]Data augmentation with Mobius transformations</title>
      <link>https://vozhuo.github.io/posts/paper-mobius-transformations/</link>
      <pubDate>Fri, 21 Feb 2020 20:46:44 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/paper-mobius-transformations/</guid>
      <description>&lt;p&gt;2020年2月7日于arXiv公开，https://arxiv.org/abs/2002.02917&lt;/p&gt;
&lt;p&gt;论文提出一种新的数据增强方法Mobius transformations（莫比乌斯变换，自译）。Mobius transformations是双射共形变换，在生物学中已有应用，将3D形态的标本（如人类，真菌和鱼类）转为2D投影。本文将其用于自然图像，一张图片经过Mobius transformations可生成多种变换后的图片。理论解释我还没看明白，所以暂时跳过。&lt;/p&gt;</description>
    </item>
    <item>
      <title>零样本学习评估</title>
      <link>https://vozhuo.github.io/posts/zsl-eval/</link>
      <pubDate>Sun, 22 Sep 2019 09:40:32 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/zsl-eval/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Xian Y, Lampert C H, Schiele B, et al. Zero-shot learning-a comprehensive evaluation of the good, the bad and the ugly[J]. IEEE transactions on pattern analysis and machine intelligence, 2018.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇论文对当前最好的零样本学习方法做了统一全面的评估。&lt;/p&gt;</description>
    </item>
    <item>
      <title>零样本学习概览（待续）</title>
      <link>https://vozhuo.github.io/posts/zsl-overview/</link>
      <pubDate>Fri, 13 Sep 2019 09:23:08 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/zsl-overview/</guid>
      <description>&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;p&gt;零样本学习（Zero-shot learning，ZSL）利用训练集数据训练模型，使得模型能够对测试集的对象进行分类，但是训练集类别和测试集类别之间没有交集。这就需要借助类别的描述，构建语义空间，来建立训练集和测试集之间的联系，从而使得模型有效。ZSL就是让计算机具备人类的推理能力，来识别出一个从未见过的新事物。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Tensorflow的py_func函数灵活操作Tensor</title>
      <link>https://vozhuo.github.io/posts/tensorflow-py_func/</link>
      <pubDate>Sun, 08 Sep 2019 09:57:09 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/tensorflow-py_func/</guid>
      <description>&lt;p&gt;由于TensorFlow中tensor数据类型的特殊性，对它的处理往往是一件比较头疼的事情。有些情况需要将其转换为numpy array进行计算，这时有一个很有效的函数py_func，这里举一个使用例子，函数本身的用法可见参考资料。&lt;/p&gt;</description>
    </item>
    <item>
      <title>半监督学习2019年最新进展</title>
      <link>https://vozhuo.github.io/posts/ssl-2019/</link>
      <pubDate>Sun, 01 Sep 2019 22:01:45 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/ssl-2019/</guid>
      <description>&lt;h1 id=&#34;ict&#34;&gt;ICT&lt;/h1&gt;
&lt;p&gt;**问题：**不同的一致性正则化技术选择不同的未标记数据扰动。随机扰动是一个简单的方案，但其对于高维度数据十分低效。VAT等模型探索能够使模型预测变化最大化的扰动，但这类方法需要额外的计算，而且有研究表明对抗性扰动训练可能会影响泛化表现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度强化学习之DQN系列</title>
      <link>https://vozhuo.github.io/posts/drl-dqn/</link>
      <pubDate>Sun, 25 Aug 2019 21:47:11 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/drl-dqn/</guid>
      <description>&lt;h1 id=&#34;基础q-learning&#34;&gt;基础（Q-Learning）&lt;/h1&gt;
&lt;p&gt;Q即为Q（s,a），就是在某一时刻的 s 状态下，采取动作a动作能够获得奖励的期望。环境会根据智能体的动作反馈相应的奖励 r。算法的主要思想就是将状态（state）与动作（action）构建成一张Q-table来存储Q值，然后根据Q值来选取能够获得最大的收益的动作。Q-Learning的算法如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度强化学习总览</title>
      <link>https://vozhuo.github.io/posts/drl-overview/</link>
      <pubDate>Sun, 18 Aug 2019 21:31:23 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/drl-overview/</guid>
      <description>&lt;h1 id=&#34;概念&#34;&gt;概念&lt;/h1&gt;
&lt;p&gt;强化学习的基本思想是通过最大化智能体（Agent）从环境中获得的累计奖赏值，以学习到完成目标的最优策略。强化学习中的基本要素包括：&lt;/p&gt;</description>
    </item>
    <item>
      <title>半监督深度学习</title>
      <link>https://vozhuo.github.io/posts/deep-ssl/</link>
      <pubDate>Sun, 11 Aug 2019 21:10:37 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-ssl/</guid>
      <description>&lt;p&gt;深度学习发展初期，训练深度的网络比较困难。对神经网络来说，一个好的初始化可以让结果更稳定，迭代次数更少，因此利用无标签数据让网络有一个好的初始化成为一个研究热点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>半监督学习再探</title>
      <link>https://vozhuo.github.io/posts/ssl-detailed/</link>
      <pubDate>Sun, 04 Aug 2019 20:42:14 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/ssl-detailed/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;传统监督学习通过对大量有标记的训练样例进行学习以建立模型用于预测未知样例的标记。在实际应用中，往往可以容易地收集到大量未标记的样本，而对这些数据赋予标记则往往需要耗费大量的人力物力。例如在进行计算机辅助医学影像分析时, 可以从医院获得大量医学影像, 但如果希望医学专家把影像中的病灶全都标识出来则是不现实的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>半监督学习总览</title>
      <link>https://vozhuo.github.io/posts/ssl-overview/</link>
      <pubDate>Sun, 21 Jul 2019 21:30:10 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/ssl-overview/</guid>
      <description>&lt;p&gt;&lt;strong&gt;半监督学习定义&lt;/strong&gt;：使用大量无标签样例和少量有标签样例进行学习。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;出现的原因&lt;/strong&gt;：在许多实际应用中（如自然语言处理、计算机视觉和生物学等领域），无类标签的样例很容易得到，而对样例的标记代价昂贵。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Keras做花卉图像分类</title>
      <link>https://vozhuo.github.io/posts/keras-image-classification/</link>
      <pubDate>Sun, 07 Jul 2019 11:28:07 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/keras-image-classification/</guid>
      <description>&lt;p&gt;本文使用Keras预训练的模型做图片分类，下载花卉图像数据集的方法参考&lt;a href=&#34;https://www.tensorflow.org/tutorials/load_data/images&#34;&gt;TensorFlow教程&lt;/a&gt;。此数据集共有5种花卉，将花卉图片重新组织为训练集和测试集。&lt;/p&gt;</description>
    </item>
    <item>
      <title>图神经网络初探</title>
      <link>https://vozhuo.github.io/posts/gnn-view/</link>
      <pubDate>Sat, 01 Jun 2019 19:25:06 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/gnn-view/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;深度学习取得成功的领域主要来源于欧几里得数据（如2维网格的图像和1维序列的文本），但现实生活中还存在大量的非欧几里得数据，如社交网络、电商网络、生物网络和交通网络等。尚未出现对这些数据的有效分析。例如，在电子商务领域，一个基于图的学习系统能够利用用户和产品之间的交互以实现高度精准的推荐。在化学领域，分子被建模为图，新药研发需要测定其生物活性。在论文引用网络中，论文之间通过引用关系互相连接，需要将它们分成不同的类别。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Relation Networks for Object Detection阅读笔记</title>
      <link>https://vozhuo.github.io/posts/rn-for-object-dection-note/</link>
      <pubDate>Sun, 26 May 2019 18:55:01 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/rn-for-object-dection-note/</guid>
      <description>&lt;p&gt;来源：https://arxiv.org/abs/1711.11575&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;会议&lt;/strong&gt;：
CVPR 2018 ORAL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：
Han Hu /
Jiayuan Gu /
Zheng Zhang /
Jifeng Dai /
Yichen Wei /&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;机构&lt;/strong&gt;：
Microsoft Research Asia /
Department of Machine Intelligence, School of EECS, Peking University&lt;/p&gt;</description>
    </item>
    <item>
      <title>[转载]有关晚清、民国现实思考的浮光掠影</title>
      <link>https://vozhuo.github.io/posts/for-the-sake-of-the-republic-review/</link>
      <pubDate>Sun, 19 May 2019 20:39:15 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/for-the-sake-of-the-republic-review/</guid>
      <description>&lt;p&gt;来源：&lt;a href=&#34;https://movie.douban.com/review/2071637/&#34;&gt;豆瓣&lt;/a&gt;，对格式略有整理，本文发布于2009年。&lt;/p&gt;
&lt;p&gt;最近重看《走向共和》以及看了一些关于民国、晚清的文章，很有感触。中国是个从来没有停止过折腾的国家，总是在绕弯子了想图省便，吝啬抗争，结果比任何一个开明国家走的更曲折、流了更多血。一个民族经此曲折，至今依然矛盾重重，很难相信中国人总在表扬自己的有智慧。一些感触散乱记下，供学史的人一笑。&lt;/p&gt;</description>
    </item>
    <item>
      <title>全卷积网络学习笔记</title>
      <link>https://vozhuo.github.io/posts/fcn-note/</link>
      <pubDate>Sun, 19 May 2019 20:30:41 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/fcn-note/</guid>
      <description>&lt;p&gt;全卷积网络（FCN）对图像进行像素级的分类，用于语义分割。FCN与CNN的主要区别在于，FCN将传统CNN中的全连接层转化为1 * 1的卷积层。与传统的CNN网络不同，FCN可以接受任意尺寸的输入图像，然后采用反卷积进行上采样，使之恢复到与输入图像相同的尺寸，从而可以预测每个像素。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mask R-CNN关键技术分析</title>
      <link>https://vozhuo.github.io/posts/mask-rcnn-key-methods/</link>
      <pubDate>Fri, 10 May 2019 16:24:50 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/mask-rcnn-key-methods/</guid>
      <description>&lt;h2 id=&#34;骨干架构fpn&#34;&gt;骨干架构（FPN）&lt;/h2&gt;
&lt;p&gt;特征金字塔网络是一种多维度特征表达，主要解决物体检测中的多尺度问题，可大幅提升小物体检测的性能。网络由浅至深，低层的特征语义信息比较少，但是目标位置准确；高层的特征语义信息比较丰富，但是目标位置比较粗略。特征图金字塔分成三个部分，一个自底向上的路径（左边），一个自顶向下的路径（右边）和横向连接部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mask RCNN之RPN初探</title>
      <link>https://vozhuo.github.io/posts/mask-rcnn-rpn/</link>
      <pubDate>Sun, 21 Apr 2019 19:07:29 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/mask-rcnn-rpn/</guid>
      <description>&lt;p&gt;本文对项目所使用的Mask_RCNN的代码作出一些解读，主要集中在核心的RPN部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之强化学习</title>
      <link>https://vozhuo.github.io/posts/machine-learning-reinforcement-learning/</link>
      <pubDate>Sun, 14 Apr 2019 18:54:10 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-reinforcement-learning/</guid>
      <description>&lt;p&gt;强化学习是机器学习的子领域之一。智能体（Agent）通过与环境（Environment）互动，来学习采取何种行动（Action）能使其在给定环境中的奖励（Reward）最大化。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之生成模型</title>
      <link>https://vozhuo.github.io/posts/deep-learning-generative-model/</link>
      <pubDate>Sun, 14 Apr 2019 18:33:30 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-generative-model/</guid>
      <description>&lt;h2 id=&#34;piexlrnncnn&#34;&gt;PiexlRNN/CNN&lt;/h2&gt;
&lt;p&gt;使用概率链式法则计算一张图片出现的概率，其中每一项为给定前i-1个像素点后第i个像素点的条件概率分布。此分布通过RNN（LSTM）/CNN来建模，再通过最大化图片x的似然学习RNN/CNN的参数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>图像分割方法可行性分析</title>
      <link>https://vozhuo.github.io/posts/analysis-of-image-segmentation/</link>
      <pubDate>Thu, 28 Mar 2019 18:49:10 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/analysis-of-image-segmentation/</guid>
      <description>&lt;p&gt;本文列出传统图像分割的主要方法，并针对目标图像进行可行性分析。&lt;/p&gt;
&lt;h2 id=&#34;基于阈值的分割&#34;&gt;基于阈值的分割&lt;/h2&gt;
&lt;p&gt;基于图像灰度图的特征划分图像，其核心是找出最优灰度阈值。主要有固定阈值和自适应阈值两种阈值选择方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kaggle比赛—狗的品种识别（初）</title>
      <link>https://vozhuo.github.io/posts/kaggle-gluon-dog/</link>
      <pubDate>Tue, 12 Mar 2019 18:28:35 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/kaggle-gluon-dog/</guid>
      <description>&lt;p&gt;在深度学习模型训练中，随着模型参数的迭代，损失函数也会不断变化。此时可画出图像以了解变化趋势。以Kaggle比赛狗的品种识别为例，针对动手学深度学习&lt;a href=&#34;http://zh.gluon.ai/chapter_computer-vision/kaggle-gluon-dog.html#%E5%AE%9A%E4%B9%89%E8%AE%AD%E7%BB%83%E5%87%BD%E6%95%B0&#34;&gt;9.13.5&lt;/a&gt;的代码段，进行如下修改，略去重复代码：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hexo迁移至Hugo</title>
      <link>https://vozhuo.github.io/posts/from-hexo-to-hugo/</link>
      <pubDate>Sat, 09 Mar 2019 12:12:23 +0800</pubDate>
      <guid>https://vozhuo.github.io/posts/from-hexo-to-hugo/</guid>
      <description>&lt;p&gt;本站使用的静态博客框架已从Hexo迁移至&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;。Hugo生成博客的速度要远大于Hexo，不过主题没有Hexo多。我选择的主题是&lt;a href=&#34;https://github.com/laozhu/hugo-nuo&#34;&gt;Hugo Nuo&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MXNet深度学习笔记（二）</title>
      <link>https://vozhuo.github.io/posts/mxnet-study-2/</link>
      <pubDate>Fri, 01 Mar 2019 09:41:01 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/mxnet-study-2/</guid>
      <description>&lt;h2 id=&#34;模型构造&#34;&gt;模型构造&lt;/h2&gt;
&lt;p&gt;上一篇中，模型构造是首先需构造Sequential实例，然后添加各层。MXNet还可以通过继承Block类来构造模型。&lt;/p&gt;
&lt;p&gt;下面一个例子中，init函数声明带有模型参数的层，函数使用get_constant方法创建训练中不被迭代的参数，即常数参数。forward函数定义模型的前向计算，通过输入x最终返回输出内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MXNet深度学习笔记</title>
      <link>https://vozhuo.github.io/posts/mxnet-study/</link>
      <pubDate>Fri, 22 Feb 2019 19:01:08 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/mxnet-study/</guid>
      <description>&lt;p&gt;本文以线性回归为例，展示MXNet以及Gluon的实现。&lt;/p&gt;
&lt;p&gt;首先构造一个简单的数据集，其中features是训练数据特征，labels是标签。&lt;/p&gt;</description>
    </item>
    <item>
      <title>序列模型和注意力机制</title>
      <link>https://vozhuo.github.io/posts/deep-learning-attention/</link>
      <pubDate>Sun, 17 Feb 2019 21:34:04 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-attention/</guid>
      <description>&lt;h2 id=&#34;基础模型&#34;&gt;基础模型&lt;/h2&gt;
&lt;p&gt;序列模型有Sequence to sequence模型和image to sequence 模型。前者最常见的应用是机器翻译。机器翻译模型的前半部分使用编码网络对输入的原文句子进行编码，后半部分使用解码网络生成对应的翻译。后者的图像描述与之类似。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自然语言处理和词嵌入</title>
      <link>https://vozhuo.github.io/posts/deep-learning-word-embedding/</link>
      <pubDate>Sun, 10 Feb 2019 21:12:53 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-word-embedding/</guid>
      <description>&lt;h2 id=&#34;词汇表征&#34;&gt;词汇表征&lt;/h2&gt;
&lt;p&gt;计算机是无法直接认识单词的，所以为了让计算机能更好地理解人类语言，需要将词汇进行表征。之前用到的方法是One-hot表征，即创建一个向量，将对应单词的位置用1表示，其余位置用0表示。这种方法的缺点是无法获得词与词之间的相关性。另一种方法是特征表征，即词嵌入，用不同的特征对单词进行特征化表示。&lt;/p&gt;</description>
    </item>
    <item>
      <title>循环神经网络</title>
      <link>https://vozhuo.github.io/posts/deep-learning-rnn/</link>
      <pubDate>Tue, 29 Jan 2019 14:05:41 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-rnn/</guid>
      <description>&lt;p&gt;对于序列模型，使用传统的神经网络效果并不好。原因是输入输出数据的长度可能不同，另外这种神经网络结果不能共享从文本不同位置所学习到的特征。循环神经则不存在这两个缺点。在每一个时间步中，循环神经网络会传递一个激活值到下一个时间步中，用于下一时间步的计算。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之人脸识别和神经风格迁移</title>
      <link>https://vozhuo.github.io/posts/deep-learning-recognition-transfer/</link>
      <pubDate>Sun, 27 Jan 2019 10:23:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-recognition-transfer/</guid>
      <description>&lt;h2 id=&#34;人脸识别&#34;&gt;人脸识别&lt;/h2&gt;
&lt;p&gt;人脸验证指输入图片后验证是否是对应的人。而人脸识别则是输入一副图片，在数据库中寻找符合输入的图片，并识别输出。大多数人脸识别系统存在One-shot learning问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>数据统计——研究生出生日期</title>
      <link>https://vozhuo.github.io/posts/statistics-of-birth-date/</link>
      <pubDate>Sun, 20 Jan 2019 16:48:44 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/statistics-of-birth-date/</guid>
      <description>&lt;p&gt;最近得到了一份带有班里所有学生身份证号的Excel文件，于是想要统计一下所有同学的出生信息。这里选用xlrd模块读取Excel文件，文件中三个工作表（Sheet）只有第一个有数据，所以读取第一个Sheet的内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之目标检测</title>
      <link>https://vozhuo.github.io/posts/deep-learning-object-detection/</link>
      <pubDate>Fri, 18 Jan 2019 11:51:04 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-object-detection/</guid>
      <description>&lt;p&gt;目标检测是计算机视觉领域的一项重要应用。通过目标检测模型，能将图片中的人、汽车等目标物体检测出来。&lt;/p&gt;
&lt;p&gt;一个简单的目标标签y如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之卷积神经网络</title>
      <link>https://vozhuo.github.io/posts/deep-learning-cnn/</link>
      <pubDate>Wed, 09 Jan 2019 18:29:52 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-cnn/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;当输入的图片尺寸较大时，深度神经网络将不再适用。卷积神经网络从而出现，可用于解决计算机视觉问题。卷积运算是卷积神经网络的重要部分，一个应用是图像边缘检测。Padding和步长是卷积运算的两个重要参数。Valid卷积：无Padding；Same卷积：加入Padding使输出与输入图片的大小相同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之结构化机器学习</title>
      <link>https://vozhuo.github.io/posts/deep-learning-structure-ml/</link>
      <pubDate>Thu, 27 Dec 2018 11:54:54 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-structure-ml/</guid>
      <description>&lt;h2 id=&#34;评估&#34;&gt;评估&lt;/h2&gt;
&lt;p&gt;在训练机器学习模型时，设置单一数字评估指标可以更好地评估模型。如查准率、召回率和结合两种的F1分数。&lt;/p&gt;
&lt;p&gt;在选择训练、开发、测试集时要遵循一定规则，开发集和测试集的分布要来自同一分布，且随机选取。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何让家用路由器支持IPv6？</title>
      <link>https://vozhuo.github.io/posts/router-support-ipv6/</link>
      <pubDate>Mon, 24 Dec 2018 09:57:12 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/router-support-ipv6/</guid>
      <description>&lt;p&gt;前一段时间买了个路由器放在宿舍用，后来发现校园网的IPv6不能用了。查资料后发现我的路由器不支持IPv6，有几种方法可以让路由器支持IPv6：&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之改善深层神经网络(2)</title>
      <link>https://vozhuo.github.io/posts/deep-learning-improve-nn-2/</link>
      <pubDate>Thu, 20 Dec 2018 11:36:19 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-improve-nn-2/</guid>
      <description>&lt;h2 id=&#34;小批量梯度下降&#34;&gt;小批量梯度下降&lt;/h2&gt;
&lt;p&gt;每次使用训练数据的子集进行梯度下降，算法执行速度会更快，这些子集称为Mini-batch（小批量）。当选择的批量大小为1时，每次对一个训练样本执行梯度下降，称为随机梯度下降。当大小为所有训练样本的个数时，则为批量梯度下降，每次对所有训练样本执行梯度下降。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之改善深层神经网络</title>
      <link>https://vozhuo.github.io/posts/deep-learning-improve-nn/</link>
      <pubDate>Thu, 13 Dec 2018 10:06:12 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-improve-nn/</guid>
      <description>&lt;p&gt;本文主要叙述神经网络的数据集、偏差与方差、正则化、随机失活、归一化输入、梯度消失与梯度爆炸、梯度检验等要点。&lt;/p&gt;
&lt;h2 id=&#34;数据集&#34;&gt;数据集&lt;/h2&gt;
&lt;p&gt;在建立神经网络模型前，我们要将数据集划分为三个部分：训练集、交叉验证集和测试集。欠拟合的情况下，出现高偏差；过拟合的情况下，出现高方差。出现高偏差时，可以使用增加隐藏层数目、加长训练时间等方法解决。出现高方差时，可以使用增加训练数据、正则化等方法解决。&lt;/p&gt;</description>
    </item>
    <item>
      <title>深度学习之神经网络</title>
      <link>https://vozhuo.github.io/posts/deep-learning-nn/</link>
      <pubDate>Thu, 06 Dec 2018 13:02:32 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/deep-learning-nn/</guid>
      <description>&lt;p&gt;因为此部分在之前的博文中提及，所以不再详细赘述其中原理，代码只展示核心部分。&lt;/p&gt;
&lt;p&gt;激活函数在神经网络中具有重要的地位，常见的激活函数有sigmoid、tanh、ReLU（修正线性单元）和Leaky ReLU等。前两种是饱和激活函数、后两种则是非饱和激活函数，它可以解决“梯度消失”的问题并加快收敛速度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之支持向量机</title>
      <link>https://vozhuo.github.io/posts/machine-learning-svm/</link>
      <pubDate>Wed, 28 Nov 2018 19:00:26 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-svm/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;支持向量机（Support Vector Machine，缩写SVM）是一种监督式学习方法，广泛应用于统计分类以及回归分析，和逻辑回归同属于线性分类器。SVM计算出的决策边界与正、负样本保持了足够大的距离，因此SVM是一种大间距分类器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之推荐系统</title>
      <link>https://vozhuo.github.io/posts/machine-learning-recommend/</link>
      <pubDate>Thu, 22 Nov 2018 20:08:51 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-recommend/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;很多网站都使用推荐系统预测用户喜欢的内容。以电影资讯网站为例，假设电影有多个特征，那么根据用户对电影的打分，我们可以预测用户可能喜欢那些类型的电影，这就是基于内容的推荐系统。这种优化过程和线性回归类似。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之异常检测</title>
      <link>https://vozhuo.github.io/posts/machine-learning-detection/</link>
      <pubDate>Thu, 22 Nov 2018 11:02:07 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-detection/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;异常检测是一种识别异常样本的方法，我们需要构建一个概率模型，如果某一样本被认定是正常样本的概率足够小，那么它会被当做异常样本。高斯分布（或称正态分布）模型是异常检测算法最常使用的概率分布模型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之主成分分析</title>
      <link>https://vozhuo.github.io/posts/machine-learning-pca/</link>
      <pubDate>Sun, 18 Nov 2018 16:32:17 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-pca/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;主成分分析（Principle Component Analysis，缩写PCA）是一种特征降维技术，也是一种无监督学习算法。另外两种较为常用的降维技术是t-SNE和自编码器。PCA能从冗余特征中提取主要成分，在不太损失模型质量的情况下，提升模型训练速度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之K-平均算法</title>
      <link>https://vozhuo.github.io/posts/machine-learning-kmeans/</link>
      <pubDate>Sun, 18 Nov 2018 15:25:17 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-kmeans/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;K-平均算法是一种无监督的聚类算法。无监督学习是一种自由的方式，其训练集不会标明类别，需要算法进行自我归纳。K-平均算法的思想是，对于给定的训练集，按照样本之间距离的大小划分为k个簇。让簇内的点尽量靠在一起，簇与簇之间的距离尽量大。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之神经网络</title>
      <link>https://vozhuo.github.io/posts/machine-learning-nn/</link>
      <pubDate>Sun, 11 Nov 2018 09:34:17 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-nn/</guid>
      <description>&lt;h2 id=&#34;前向传播&#34;&gt;前向传播&lt;/h2&gt;
&lt;p&gt;神经网络每层都包含有若干神经元，当信息传递时，第i层神经元接受上层的输入，经激励函数作用后，会产生一个激活向量，此向量将作为下一层神经元的输入值，以此规律向下不断传递。整个过程因为发生顺序是不断地将刺激由前一层传向下一层，故而称之为前向传递。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之逻辑回归</title>
      <link>https://vozhuo.github.io/posts/machine-learning-logistic-regression/</link>
      <pubDate>Sun, 04 Nov 2018 13:19:44 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-logistic-regression/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;在现实生活中，我们遇到的数据大多数都是非线性的，因此不能用线性回归的方法来进行数据拟合，这就需要用到逻辑回归。逻辑回归虽然名字里带“回归”，但是实际上是一种分类方法，用于两分类问题。基本过程如下：&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器学习之线性回归</title>
      <link>https://vozhuo.github.io/posts/machine-learning-gradient-descent/</link>
      <pubDate>Sat, 27 Oct 2018 16:57:48 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/machine-learning-gradient-descent/</guid>
      <description>&lt;h2 id=&#34;概念&#34;&gt;概念&lt;/h2&gt;
&lt;p&gt;梯度下降法是一种寻找函数最小值的一阶最优化算法，为找到函数的局部最小值，需要采用与当前点处函数的梯度（或者是近似梯度）的反方向成比例的步长进行迭代搜索。直观地来看，假如我们处于一座山的顶端，想要寻找最快的下山方法。从几何意义上讲，梯度的方向是函数值增加最快的方向，所以梯度的反方向就是函数值下降最快的方向。我们在每一点反复求取梯度，最后到达局部的最小值，就可以下山了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周LeetCode习题精选——树</title>
      <link>https://vozhuo.github.io/posts/leetcode-weekend-featured-tree/</link>
      <pubDate>Sun, 21 Oct 2018 14:44:19 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/leetcode-weekend-featured-tree/</guid>
      <description>&lt;h2 id=&#34;leetcode-226&#34;&gt;LeetCode 226&lt;/h2&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://leetcode.com/problems/invert-binary-tree/description/&#34;&gt;Invert Binary Tree&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;难倒大神的反转二叉树问题，其实这道题并不难，用递归和遍历都可解决。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周LeetCode习题精选——链表</title>
      <link>https://vozhuo.github.io/posts/leetcode_weekend_featured_ll/</link>
      <pubDate>Sun, 14 Oct 2018 14:36:49 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/leetcode_weekend_featured_ll/</guid>
      <description>&lt;h2 id=&#34;leetcode-206&#34;&gt;LeetCode 206&lt;/h2&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://leetcode.com/problems/reverse-linked-list/&#34;&gt;Reverse Linked List&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本题是一道非常基础的反转单链表。首先想到的方法是把链表转换成数组直接逆序，这里不再细说。另外两种方法是递归和迭代。递归方法是指先反转最后两个节点，依次往前至全部反转。迭代法是从左至右反转。&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周LeetCode习题精选——动态规划(2)</title>
      <link>https://vozhuo.github.io/posts/leetcode-weekend-featured-dp2/</link>
      <pubDate>Sun, 07 Oct 2018 13:48:36 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/leetcode-weekend-featured-dp2/</guid>
      <description>&lt;h2 id=&#34;leetcode-55&#34;&gt;LeetCode 55&lt;/h2&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://leetcode.com/problems/jump-game/description/&#34;&gt;Jump Game&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本题可以使用动态规划解决。动态规划主要有四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用递归回溯方法&lt;/li&gt;
&lt;li&gt;使用备忘录方法优化（自顶向下的动态规划）&lt;/li&gt;
&lt;li&gt;消除递归方法（自底向上的动态规划）&lt;/li&gt;
&lt;li&gt;使用其他方法优化时间/空间复杂度&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>一周LeetCode习题精选——动态规划</title>
      <link>https://vozhuo.github.io/posts/leetcode_weekend_featured_dp/</link>
      <pubDate>Sun, 30 Sep 2018 20:45:55 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/leetcode_weekend_featured_dp/</guid>
      <description>&lt;h2 id=&#34;leetcode-198&#34;&gt;LeetCode 198&lt;/h2&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://leetcode.com/problems/house-robber/description/&#34;&gt;House Robber&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本题使用动态规划解决。首先需要分析题目的递归关系：当强盗到达第i间房屋时，他可以选择抢，也可以选择不抢。如果抢劫这间房屋，根据题目要求，他必定没有抢劫第i-1间房屋，但他可能抢劫第i-2间房屋。如果不抢劫第i间房屋，那么他可能抢劫第i-1间房屋。这两个选择造成抢劫得来金钱的不同。设rob(i)为前i间房屋抢劫得来金钱的最大值，第一种需要计算前i-2间房屋抢劫金钱的最大值加上第i间房屋抢劫的金钱。第二种只需要计算前i-1间房屋抢劫金钱的最大值。两者需取其中最大值，由此得出递归关系：&lt;/p&gt;</description>
    </item>
    <item>
      <title>一周LeetCode习题精选</title>
      <link>https://vozhuo.github.io/posts/leetcode_weekend_featured/</link>
      <pubDate>Sun, 23 Sep 2018 19:41:45 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/leetcode_weekend_featured/</guid>
      <description>&lt;h2 id=&#34;leetcode-208&#34;&gt;LeetCode 208&lt;/h2&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://leetcode.com/problems/implement-trie-prefix-tree/description/&#34;&gt;Implement Trie (Prefix Tree)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本题要求构造一个前缀树。前缀树是数据结构中树的一种，用于检索字符串数据集中的值，在自动完成、拼写检查、IP路由等方面都有应用。前缀树节点有两个字段：一个链接到字符串的下一个字符节点child，另一个为布尔值is_end，判断指定节点是否已到末尾。这里需要说一下Python的collections.defaultdict()这个方法，此方法构建了一个类似字典的对象，与普通字典不同的是，在查找字典中不存在key时，普通字典会报错，而defaultdict不会返回错误，而是返回一个默认值。本例会返回一个TrieNode节点，这样省去了在功能方法中新建节点的步骤。本题要求实现三个前缀树的三个功能：插入单词、搜索给定单词是否存在于前缀树以及搜索给定单词是否是前缀树中单词的前缀。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python爬虫初学</title>
      <link>https://vozhuo.github.io/posts/python_spider_practice/</link>
      <pubDate>Sun, 16 Sep 2018 11:29:17 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/python_spider_practice/</guid>
      <description>&lt;p&gt;这几天学习了Python爬虫有关的知识，自己做了一个简单的实例：爬取熊猫直播某板块的主播信息。本实例使用Requests +BeautifulSoup和爬虫框架Scrapy两种方法。&lt;/p&gt;
&lt;p&gt;BeautifulSoup可以从HTML或XML文件中提取数据，Requests则用于读取网络资源。虽然Python内置的urllib模块也可以读取网页，但Requests使用起来要更方便。首先需要确定要爬取的URL，这里我选择了熊猫直播的“守望先锋”板块，网址为&lt;a href=&#34;https://www.panda.tv/cate/overwatch&#34;&gt;https://www.panda.tv/cate/overwatch&lt;/a&gt;。先来看一下网页的源码：&lt;/p&gt;</description>
    </item>
    <item>
      <title>毕设项目中的开源库</title>
      <link>https://vozhuo.github.io/posts/android_project_dependencies/</link>
      <pubDate>Tue, 04 Sep 2018 16:03:14 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/android_project_dependencies/</guid>
      <description>&lt;p&gt;这篇博文分享一下我在毕业设计开发时用到的一些开源库和技术。&lt;/p&gt;
&lt;h1 id=&#34;ariahttpsgithubcomarialyyaria&#34;&gt;&lt;a href=&#34;https://github.com/AriaLyy/Aria&#34;&gt;Aria&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;用于实现WebView的文件下载功能，我们知道原生的WebView是没有下载功能的，所以需要自己实现。我并没有这方面的知识，从网上看了一些资料后，最终选择了Aria，使用效果还是不错的。&lt;/p&gt;
&lt;h1 id=&#34;brvahhttpsgithubcomcymchadbaserecyclerviewadapterhelper&#34;&gt;&lt;a href=&#34;https://github.com/CymChad/BaseRecyclerViewAdapterHelper&#34;&gt;BRVAH&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;全名BaseRecyclerViewAdapterHelper，是一个RecyclerAdapter框架。我的项目使用了很多RecyclerView，而定义Adapter是个很头疼的事情，太多重复的工作。项目使用此框架后精简了很多代码，此外它还有Item点击事件、列表加载动画、拖拽/滑动删除等一系列实用的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebView开发问题</title>
      <link>https://vozhuo.github.io/posts/webview_development_issues/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/webview_development_issues/</guid>
      <description>&lt;p&gt;今天来说一下我在毕业设计开发时遇到的一个问题。我开发的是一个基于Android WebView手机浏览器。网上说WebView有不少坑，在实际开发时发现确实有不少坑。我遇到的其中一个问题出现在浏览器的前进后退功能上。首先出现的情况是网页因重定向无法正常调用WebView的goBack()方法，这个在网上已有不少解答了。然而网上的解决方法在我测试的Android 4.4手机上仍会出现问题，具体表现就是goBack()方法没有任何反应。所以只能采取自定义历史栈的方法。定义一个后退栈mBrowsedHistory和一个前进栈mForwardHistory，当访问一个网页时，将网页URL添加到后退栈中。执行后退时，后退栈弹出此URL，并同时在前进栈中加入此URL。当通过点击网站上的超链接访问网页时，前进栈会被清空。因刷新、重定向等载入的网页不会加入后退栈中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从Jekyll到Hexo</title>
      <link>https://vozhuo.github.io/posts/from_jekyll_to_hexo/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/from_jekyll_to_hexo/</guid>
      <description>前几个月博客使用的.cf域名到期了，后来忘了续期，没想到几天后就被别人申请去了。不得已再申请了一个.tk的域名。后来因为各种原因没有更新博客的其他东西。现在一想干脆把博客重新搭建了一遍算了。于是我把静态框架从Jekyll转到了Hexo，Hexo的优点是可支持本地预览，不用再担心MD文件写错了。主题使用了yilia。搭建教程网上有很多，在此不多做赘述。需要注意的是Github Pages的IP已经更新，不再是原来的192.30.252.154和192.30.252.153了，现在有4个可用的IP：185.199.108.153、185.199.109.153、185.199.110.153和185.199.111.153。Hexo的MD语法和Jekyll的略有区别，如果不修改md文件命名的话，放到Hexo中生成的URL会重复出现日期。有两种方法可修改，一种是修改原来的MD文件名，删除日期。另一种方法是修改框架的_config.xml文件中的new_post_name一栏。原来博客使用的HTTPS服务商早已关闭，好在Github Pages已于2018年5月1日支持为自定义域名添加HTTPS服务。这样一来博客就基本迁移完成了。
参考资料： https://thief.one/2017/03/03/Hexo搭建博客教程/</description>
    </item>
    <item>
      <title>2018年中国科学院新疆天文台复试回忆</title>
      <link>https://vozhuo.github.io/posts/xao_retext/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/xao_retext/</guid>
      <description>&lt;p&gt;中国科学院新疆天文台于2018年1月25日发布调剂公告，我是2月17日给研招办发送的邮件，一天后收到回复，告诉我若被初选进入复试会在2月底3月初发通知。2月27日，新疆天文台给我发送了调剂复试通知。
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;说一下具体的复试流程：&lt;/p&gt;</description>
    </item>
    <item>
      <title>2018年广西大学复试回忆</title>
      <link>https://vozhuo.github.io/posts/gxu_retest/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/gxu_retest/</guid>
      <description>&lt;p&gt;2018年3月23日调剂系统开通后，我开始填写调剂志愿。&lt;/p&gt;
&lt;p&gt;3月24日晚21:50分，我在调剂志愿里填写了广西大学。30分钟后，广西大学向我发送了复试通知。这是我收到的第一个复试通知，于是着手准备复试。&lt;/p&gt;
&lt;p&gt;广西大学的复试持续时间比较长，从3月27日到2月30日。27日是报道时间，向学院提交复试材料就可以了。下午老师通知去机房做心理测试，问题和前一次发的问卷基本是一致的。28日也是只需在校医院体检即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Python模拟GiWiFi登录</title>
      <link>https://vozhuo.github.io/posts/python_simulate_login/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/python_simulate_login/</guid>
      <description>&lt;p&gt;前几天学了Python爬虫的一些基础，就想拿个网站来练练手。我想到了最近一直在用的GiWiFi登录网站，所以就用此网站做模拟登陆。&lt;/p&gt;
&lt;p&gt;我使用Chrome的开发者工具来抓取网页链接信息。随便点击一个网站，就会跳转到GiWiFi的登录界面，如图：
&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>GiWiFi手机助手反编译笔记</title>
      <link>https://vozhuo.github.io/posts/giwifi_decompile/</link>
      <pubDate>Mon, 16 Jan 2017 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/giwifi_decompile/</guid>
      <description>&lt;p&gt;最近学校出了一个GiWiFi无线网络，因为速度比较可观，而且可以免费试用，所以用的人还是比较多的。要在手机上使用这一网络要下一个客户端，而客户端带有许多广告和额外的没有用的功能。我自己用过一些APP的去广告版，之前也写过一个简单的Andriod App，于是决定这次自己进行修改。查阅了一些Android反编译的相关资料后，就着手开始进行。&lt;/p&gt;
&lt;p&gt;我使用了一个集成软件&lt;a href=&#34;http://www.popotu.com/popo/apkide.html&#34;&gt;APK改之理&lt;/a&gt;，它集成了许多反编译工具，使用起来也很方便。&lt;/p&gt;
&lt;p&gt;先来看一下APP的界面：
&lt;img loading=&#34;lazy&#34; src=&#34;https://vozhuo.github.io/img/GiWiFi/GiWiFi_original.png&#34; alt=&#34;&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>I&#39;M BLOGGING</title>
      <link>https://vozhuo.github.io/posts/im_blogging/</link>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://vozhuo.github.io/posts/im_blogging/</guid>
      <description>&lt;p&gt;大概在两个月之前，有了搞一个个人博客的念头。之前曾经了解过一些建站的过程，于是就开始着手准备。&lt;/p&gt;
&lt;p&gt;首先是域名，因为我现在只想把博客当测试来用，所以并没有购买付费域名。我找到了&lt;a href=&#34;http://www.freenom.com&#34;&gt;Freenom&lt;/a&gt;这个网站，它提供TK、ML、GA、CF、GQ五个免费顶级域名，最后我申请了12个月的CF域名，到期时间2017年2月26日。未来可能会更换付费域名。&lt;/p&gt;
&lt;p&gt;再就是网站空间。以前曾看到过用&lt;a href=&#34;http://jekyll.bootcss.com/&#34;&gt;Jekyll&lt;/a&gt;搭建博客的文章，现在决定深入了解一下。后来在网上找到&lt;a href=&#34;http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/&#34;&gt;一篇文章&lt;/a&gt;，这篇文章对我影响很大，后面的步骤基本上就是对照它来完成的，这里我就不再赘述。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
